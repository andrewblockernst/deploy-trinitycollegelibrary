---
// Game state management
const BOARD_SIZE = 3;

let board: string[][] = Array(BOARD_SIZE)
  .fill(null)
  .map(() => Array(BOARD_SIZE).fill(""));

let currentPlayer = "X";
let winner: string | null = null;
let gameOver = false;

// Function to check for winner
function checkWinner(board: string[][]): string | null {
  // Check rows
  for (let i = 0; i < BOARD_SIZE; i++) {
    if (
      board[i][0] &&
      board[i][0] === board[i][1] &&
      board[i][1] === board[i][2]
    ) {
      return board[i][0];
    }
  }

  // Check columns
  for (let i = 0; i < BOARD_SIZE; i++) {
    if (
      board[0][i] &&
      board[0][i] === board[1][i] &&
      board[1][i] === board[2][i]
    ) {
      return board[0][i];
    }
  }

  // Check diagonals
  if (
    board[0][0] &&
    board[0][0] === board[1][1] &&
    board[1][1] === board[2][2]
  ) {
    return board[0][0];
  }
  if (
    board[0][2] &&
    board[0][2] === board[1][1] &&
    board[1][1] === board[2][0]
  ) {
    return board[0][2];
  }

  // Check for tie
  if (board.every((row) => row.every((cell) => cell !== ""))) {
    return "tie";
  }

  return null;
}

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const move = formData.get("move")?.toString();
    const boardParam = formData.get("board")?.toString();
    const player = formData.get("player")?.toString();

    if (boardParam) {
      board = JSON.parse(boardParam);
    }

    if (player) {
      currentPlayer = player;
    }

    if (move) {
      const [row, col] = move.split(",").map(Number);
      if (board[row][col] === "") {
        board[row][col] = currentPlayer;
        winner = checkWinner(board);

        if (winner) {
          gameOver = true;
        } else {
          currentPlayer = currentPlayer === "X" ? "O" : "X";
        }
      }
    }
  } catch (error) {
    console.error("Error processing form data:", error);
  }
}
---

<div class="game-container">
  <h2>TaTeTi</h2>
  <div class="status">
    {
      gameOver ? (
        winner === "tie" ? (
          <p>Empate!</p>
        ) : (
          <p>Jugador {winner} gana!</p>
        )
      ) : (
        <p>Jugador: {currentPlayer}</p>
      )
    }
  </div>

  <form method="POST" class="game-board">
    <input type="hidden" name="board" value={JSON.stringify(board)} />
    <input type="hidden" name="player" value={currentPlayer} />
    {
      board.map((row, rowIndex) => (
        <div class="row">
          {row.map((cell, colIndex) => (
            <button
              type="submit"
              name="move"
              value={`${rowIndex},${colIndex}`}
              disabled={gameOver || cell !== ""}
              class={`cell ${cell.toLowerCase()}`}
            >
              {cell}
            </button>
          ))}
        </div>
      ))
    }
  </form>

  {
    gameOver && (
      <form method="GET">
        <button type="submit" class="reset-button">
          Jugar de nuevo
        </button>
      </form>
    )
  }
</div>

<style>
  .game-container {
    max-width: 400px;
    margin: 2rem auto;
    text-align: center;
  }

  .game-board {
    display: inline-block;
    background: #333;
    padding: 10px;
    border-radius: 10px;
  }

  .row {
    display: flex;
  }

  .cell {
    width: 80px;
    height: 80px;
    margin: 5px;
    font-size: 2rem;
    font-weight: bold;
    background: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cell:disabled {
    cursor: not-allowed;
    opacity: 0.8;
  }

  .cell:hover {
    background: #f0f0f0;
  }

  .cell.x {
    background-color: #d00c0c;
  }

  .cell.o {
    background-color: #3245ff;
  }

  .status {
    margin: 1rem 0;
    font-size: 1.2rem;
  }

  .reset-button {
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    font-size: 1rem;
    background: #3245ff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }

  .reset-button:hover {
    background: #2537cc;
  }
</style>
