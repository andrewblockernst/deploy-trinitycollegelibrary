---
type Props = {
  content: string;
  likes: number;
  id: string;
};
const { content, likes, id }: Props = Astro.props;
---

<message-item>
  <li
    data-id={id}
    class="w-full flex justify-between border border-gray-300 rounded-md p-2"
  >
    <p data-content="content" class="flex-1 text-xl">{content}</p>
    <form method="POST" action={`/api/mensajes/${id}`}>
      <button
        class="bg-blue-500 hover:bg-blue-600 text-white rounded-md p-2 cursor-pointer"
        name="action"
        value="like"
        type="submit"
        data-action-button="like-button"
      >
        {likes} Like{likes !== 1 ? "s" : ""}
      </button>
      <button
        class="bg-red-500 hover:bg-red-600 text-white rounded-md p-2 cursor-pointer"
        name="action"
        value="delete"
        type="submit"
        data-action-button="delete-button"
      >
        Eliminar</button
      >
    </form>
  </li>
</message-item>

<script>
  import type { Mensaje } from "../types";

  export class MessageItem extends HTMLElement {
    private li: HTMLLIElement | null = null;
    private likeButton: HTMLButtonElement | null = null;
    private deleteButton: HTMLButtonElement | null = null;
    private contentElement: HTMLElement | null = null;

    private messageId: string | undefined;
    connectedCallback() {
      this.li = this.querySelector("li")!;
      this.likeButton = this.querySelector<HTMLButtonElement>(
        "[data-action-button='like-button']"
      )!;
      this.deleteButton = this.querySelector<HTMLButtonElement>(
        "[data-action-button='delete-button']"
      )!;
      this.contentElement = this.querySelector<HTMLElement>(
        "[data-content='content']"
      )!;

      this.messageId = this.li.dataset.id;
      this.likeButton.addEventListener("click", this.handleLike);
      this.deleteButton.addEventListener("click", this.handleDelete);
    }

    setId(id: string) {
      if (!this.li) throw new Error();
      this.li.dataset["id"] = id;
      this.messageId = id;
    }

    setLikes(likes: number) {
      if (!this.likeButton) throw new Error();
      this.likeButton.textContent = `${likes} Like${likes !== 1 ? "s" : ""}`;
    }

    setContent(content: string) {
      if (!this.contentElement) throw new Error();
      this.contentElement.textContent = content;
    }

    handleLike = async (e: MouseEvent) => {
      e.preventDefault();

      const id = this.messageId;

      const response = await fetch(`/api/mensajes/${id}`, {
        method: "POST",
        body: JSON.stringify({ action: "like" }),
        headers: {
          "Content-Type": "application/json",
        },
      });

      const data: { success: boolean; mensaje: Mensaje } =
        await response.json();

      if (data.success) {
        this.setLikes(data.mensaje.likes);
      }
    };

    handleDelete = async (e: MouseEvent) => {
      e.preventDefault();
      const id = this.messageId;

      const response = await fetch(`/api/mensajes/${id}`, {
        method: "POST",
        body: JSON.stringify({ action: "delete" }),
        headers: {
          "Content-Type": "application/json",
        },
      });

      const data: { success: boolean; mensaje: Mensaje } =
        await response.json();

      if (data.success) {
        this.remove();
      }
    };
  }

  customElements.define("message-item", MessageItem);
</script>
