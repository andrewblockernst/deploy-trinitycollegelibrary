---
const { search } = Astro.props as { search: string };
---

<filter-form>
  <form action="/" class="flex w-full justify-between gap-2">
    <input
      class="border border-gray-300 rounded-md p-2 flex-1"
      type="text"
      name="search"
      placeholder="Texto a buscar"
      value={search}
      autofocus
    />
    <button
      class="bg-blue-500 hover:bg-blue-600 text-white rounded-md p-2 cursor-pointer"
      type="submit"
    >
      Buscar
    </button>
  </form>
</filter-form>

<script>
  import type { Mensaje } from "../types";
  import type { MessageList } from "./MensajeList.astro.0.mts";

  class FilterForm extends HTMLElement {
    private form: HTMLFormElement | null = null;
    private button: HTMLButtonElement | null = null;
    private input: HTMLInputElement | null = null;
    private messageList: MessageList | null = null;
    private interval: number | null = null;
    connectedCallback() {
      this.form = this.querySelector("form");
      this.input = this.querySelector("input");
      this.button = this.querySelector("button");
      this.messageList = document.querySelector("message-list");

      this.form?.addEventListener("submit", (e) => {
        e.preventDefault();
        this.handleFilter();
      });

      this.input?.addEventListener("input", this.handleFilter);

      this.button?.remove();

      this.interval = setInterval(this.handleFilter, 5000);
    }

    disconnectedCallback() {
      clearInterval(this.interval!);
    }

    handleFilter = async () => {
      const content = this.input?.value ?? "";

      const url = new URL(window.location.href);
      url.searchParams.set("search", content);
      window.history.pushState({}, "", url.toString());

      const response = await fetch(`/api/mensajes?search=${content}`);
      const messages: { messages: Mensaje[] } = await response.json();
      this.messageList?.renderMessages(messages.messages);
    };
  }

  customElements.define("filter-form", FilterForm);
</script>
