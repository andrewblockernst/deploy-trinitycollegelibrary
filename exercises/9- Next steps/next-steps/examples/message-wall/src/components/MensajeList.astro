---
import type { Mensaje } from "../types";
import MensajeItem from "./Mensaje.astro";

const { mensajes } = Astro.props as { mensajes: Mensaje[] };
---

<message-list class="w-full">
  <ul id="message-list" class="flex flex-col gap-2 w-full">
    {
      mensajes.map((mensaje) => (
        <MensajeItem
          content={mensaje.content}
          likes={mensaje.likes}
          id={mensaje.id}
        />
      ))
    }
  </ul>
  <template id="message-item-template">
    <MensajeItem content="" likes={0} id="" />
  </template>
</message-list>

<script>
  import type { Mensaje } from "../types";
  import type { MessageItem } from "./Mensaje.astro.0.mts";

  export class MessageList extends HTMLElement {
    private list: HTMLUListElement | null = null;
    private newMessageTemplate: HTMLTemplateElement | null = null;

    connectedCallback() {
      this.list = this.querySelector("ul");
      this.newMessageTemplate = this.querySelector("template");
    }

    renderMessages = (messages: Mensaje[]) => {
      this.list!.innerHTML = "";

      for (const message of messages) {
        this.addMessage(message);
      }
    };

    addMessage = (message: Mensaje) => {
      const template =
        this.newMessageTemplate?.content.querySelector("message-item");
      const newMessage = template?.cloneNode(true) as MessageItem;

      this.list?.append(newMessage);
      newMessage.setContent(message.content);
      newMessage.setId(message.id);
      newMessage.setLikes(message.likes);
    };
  }

  customElements.define("message-list", MessageList);
</script>
